{
  "swagger": "2.0",
  "host": "{{ host }}",
  "schemes": [
    "https"
  ],
  "info": {
    "description": "OAuth Access Token generation",
    "title": "Generate Access Token",
    "version": "1.0.1"
  },
  "basePath": "/apis/v1.0.1/oauth",
  "paths": {
    "/authorize": {
      "get": {
        "description": "<p>Generates Access Token or Authrorization code depending on response_type.</p><p>&nbsp;</p><p>GET  /authorize is redirected to Consent Application where a two-factor authentication is initiated. Upon successful authentication access_token or authorization code is returned as query parameters passed to the redirect uri.</p>",
        "summary": "Generates Access Token to initiate AISP/PISP.",
        "operationId": "authorize",
        "tags": [
          "OAuth"
        ],
        "produces": [
          "text/html; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [],
        "parameters": [{
            "in": "query",
            "name": "client_id",
            "description": "TPPs MUST provide this value and set it to the client id issued to them.",
            "type": "string",
            "default": "{{ client_id_aisp }}",
            "required": true
          },
          {
            "in": "query",
            "name": "redirect_uri",
            "description": "Redirect URI defined with your registered App.  This MUST be a valid, absolute URL that was registered during Client Registration.",
            "type": "string",
            "default" : "http://localhost/",
            "required": true
          },
          {
            "in": "query",
            "name": "nonce",
            "description": "A nonce value",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "response_type",
            "description": "OAuth 2.0 requires that this parameter is provided. Value is set to  ‘code id_token’ or ‘code’. The values for these parameters MUST match those in the Request Object, if present.",
            "type": "string",
            "required": true,
            "enum": [
              "code id_token",
              "code",
              "token",
              "token id_token"
            ]
          },
          {
            "in": "query",
            "name": "state",
            "description": "TPPs MAY provide a state parameter. An Unique id to maintain state between asynchronous requests at the Client.",
            "type": "string",
            "required": true,
            "default": "af0ifjsldkj"
          },
          {
            "in": "query",
            "name": "scope",
            "description": "The scopes MUST be a sub-set of the scopes that were registered during Client Registration. At a minimum the scope parameter MUST contain openid. Other valid scopes are: accounts, payments",
            "type": "string",
            "required": true,
            "enum": [
              "openid accounts",
              "openid payments",
              "openid"
            ]
          },
          {
            "in": "query",
            "name": "request",
            "description": "The parameter MUST contain a JWS that is signed by the TPP.  The JWS payload MUST consist of a JSON object containing a request object as per OIDC Core 6.1.<p>The request object MUST contain a claims section that includes as a minimum <p><li>openbanking_intent_id that identifies the intent id for which this authorisation is requested",
            "type": "string",
            "required": true

          }
        ]
      }
    },
    "/token": {
      "post": {
        "description": "<p>Returns the access token that needs be presented for Account Access API calls. This call follows a call to GET /authorization which returns an authorization code after successful two-factor authentication.</p>",
        "summary": "Generates Access Token to initiate Account Access methods.",
        "operationId": "token",
        "tags": [
          "OAuth"
        ],
        "produces": [
          "text/html; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TokenResponse"
            }
          }
        },
        "security": [],
        "parameters": [{
            "in": "formData",
            "name": "client_id",
            "description": "Client ID of the registered App - for non-authenticated requests and Optional for client-assertion requests",
            "type": "string",
            "default": "{{ client_id_aisp }}",
            "required": false
          },
          {
            "in": "formData",
            "name": "redirect_uri",
            "description": "Redirect URI defined with your registered App. This is verified against the redirect uri that is registered when the App is created. If found to be different this call fails to return the access token.",
            "type": "string",
            "default" : "http://localhost/",
            "required": true
          },
          {
            "in": "formData",
            "name": "grant_type",
            "description": " 'authorization_code' or 'client_credentials'.",
            "type": "string",
            "required": true,
            "enum": [
              "client_credentials",
              "authorization_code"
            ]
          },
          {
            "in": "formData",
            "name": "code",
            "description": "Code returned from the authorize call. Applicable only on grant_type = authorization_code and the value is one fetched from /authorize API",
            "type": "string",
            "required": false
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Base 64 encoded string with client_id:client_secret.",
            "type": "string",
            "required": false
          },
          {
            "in": "formData",
            "name": "scope",
            "description": "The scopes is used for grant_type 'client_credentials'",
            "type": "string",
            "enum": [
              "accounts",
              "payments"
            ]
          },
          {
            "in": "formData",
            "name": "client_assertion_type",
            "description": "Required for client_assertion based authentication. The value MUST be 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'",
            "type": "string",
            "required": false,
            "enum": [
              "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"
            ]
          },
          {
            "in": "formData",
            "name": "client_assertion",
            "description": "Authentication JWT token containing clientId as iss and signed using the private key of the TPP",
            "type": "string",
            "required": false
          }
        ]
      }
    }
  },
  "definitions": {
    "TokenResponse": {
      "description": "Response from the Token method",
      "type": "object",
      "properties": {
        "access_token": {
          "type": "string",
          "description": "Access Token, this needs to be presented for Account Access APIs."
        },
        "token_type": {
          "type": "string",
          "description": "Bearer"
        },
        "refresh_token": {
          "type": "string",
          "description": "Refresh token. Used to get fresh access token when it expires."
        },
        "expires_in": {
          "type": "integer",
          "description": "Duration for which the token is valid, represented in seconds."
        },
        "id_token": {
          "type": "string",
          "description": "JWT Token that a bank returns that can have optional customer information."
        }
      },
      "xml": {
        "name": "TokenResponse"
      }
    }
  }
}