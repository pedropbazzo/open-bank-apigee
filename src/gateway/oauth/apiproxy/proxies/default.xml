<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
 Copyright 2017 Google Inc.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 https://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<ProxyEndpoint name="default">
    <Description/>
    <FaultRules/>
    <Flows>
        <Flow name="authorization">
            <Description/>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>Validate-Request</Name>
                </Step>
                <Step>
                    <Condition>isError = true</Condition>
                    <FaultRules/>
                    <Name>Raise-Fault-Invalid-Request</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Authorize-Client-Application</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Get-API-Product-Scopes</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Verify-Request-JWT</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Validate-Request-JWT</Name>
                </Step>
                <Step>
                    <Condition>isError = true</Condition>
                    <FaultRules/>
                    <Name>Raise-Fault-Invalid-Request</Name>
                </Step>
                <Step>
                    <Condition>nonce != null and nonce != ""</Condition>
                    <FaultRules/>
                    <Name>Nonce-Replay-Attack-Validation</Name>
                </Step>
                <Step>
                    <Condition>nonce_cache_value != null</Condition>
                    <FaultRules/>
                    <Name>Assign-Replay-Attach-Error</Name>
                </Step>
                <Step>
                    <Condition>(error_variable != null)</Condition>
                    <FaultRules/>
                    <Name>Invalid-Authorization-Request</Name>
                </Step>
                <Step>
                    <Condition>nonce != null and nonce != ""</Condition>
                    <FaultRules/>
                    <Name>Populate-Nonce-Information</Name>
                </Step>
                <Step>
                    <Condition>type != null and type != "" and type == "accounts"</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Validate-Account-Request</Name>
                </Step>
                <Step>
                    <Condition>type != null and type != "" and type == "payments"</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Validate-Payment-Request</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Validate-Account-Request</Name>
                </Step>
                <Step>
                    <Condition>isError = true</Condition>
                    <FaultRules/>
                    <Name>Raise-Fault-Invalid-Request</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Create-Application-Session-Consent</Name>
                </Step>
            </Request>
            <Response/>
            <Condition>(proxy.pathsuffix MatchesPath "/authorize")</Condition>
        </Flow>
        <Flow name="token">
            <Description/>
            <Request>
                <Step>
                    <Condition>(request.formparam.client_assertion != null) and (request.formparam.client_assertion != "")</Condition>
                    <FaultRules/>
                    <Name>Extract-JWT-Body</Name>
                </Step>
                <Step>
                    <Condition>(isError != true) and (request.formparam.client_assertion != null) and (request.formparam.client_assertion != "")</Condition>
                    <FaultRules/>
                    <Name>Authorize-Client-Application</Name>
                </Step>
                <Step>
                    <Condition>(request.formparam.client_assertion != null) and (request.formparam.client_assertion != "")</Condition>
                    <FaultRules/>
                    <Name>Verify-JWT</Name>
                </Step>
                <Step>
                    <Condition>(isError != true) and (request.formparam.client_assertion != null) and (request.formparam.client_assertion != "")</Condition>
                    <FaultRules/>
                    <Name>Validate-Client-Assertion</Name>
                </Step>
                <Step>
                    <Condition>(request.formparam.client_assertion != null) and (request.formparam.client_assertion != "")</Condition>
                    <FaultRules/>
                    <Name>Assign-Auth-Basic-Header</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Condition>request.formparam.grant_type = "authorization_code" or request.formparam.grant_type = "client_credentials"</Condition>
                    <Name>Security-Generate-Access-Token</Name>
                </Step>
                <Step>
                    <Condition>request.formparam.grant_type = "refresh_token"</Condition>
                    <FaultRules/>
                    <Name>Security-Refresh-Access-Token</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>(request.formparam.grant_type = "authorization_code" or request.formparam.grant_type = "client_credentials") and oauthV2.failed = false</Condition>
                    <FaultRules/>
                    <Name>Extract-Token-Response</Name>
                </Step>
                <Step>
                    <Condition>Type = "accounts" and request.formparam.grant_type = "authorization_code" and oauthV2.failed = false</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Update-Account-Request</Name>
                </Step>
                <Step>
                    <Condition>Type = "payments" and request.formparam.grant_type = "authorization_code" and oauthV2.failed = false</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Update-Payment-Request</Name>
                </Step>
                <Step>
                    <Condition>request.formparam.grant_type = "authorization_code" and oauthV2.failed = false</Condition>
                    <FaultRules/>
                    <Name>Assign-Token-Response</Name>
                </Step>
                <Step>
                    <Condition>request.formparam.grant_type = "client_credentials" and oauthV2.failed = false</Condition>
                    <FaultRules/>
                    <Name>Assign-Token-Response-CC</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/token") and (request.verb = "POST")</Condition>
        </Flow>
        <Flow name="authorized">
            <Description/>
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>ConsentAppAPIKey</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Extract-Body-Attributes</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Assign-Response-Type</Name>
                </Step>
            </Request>
            <Response>
                <Step>
                    <Condition>ResponseTypeCode = true</Condition>
                    <FaultRules/>
                    <Name>Generate-Authorization-Code</Name>
                </Step>
                <Step>
                    <Condition>ResponseTypeToken = true</Condition>
                    <FaultRules/>
                    <Name>Security-Generate-Access-Token-Implicit</Name>
                </Step>
                <Step>
                    <Condition>Type = "accounts" and ResponseTypeToken = true</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Update-Account-Request</Name>
                </Step>
                <Step>
                    <Condition>Type = "payments" and ResponseTypeToken = true</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Update-Payment-Request</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Extract-Private-Key</Name>
                </Step>
                <Step>
                    <Condition>ResponseTypeIdToken = true</Condition>
                    <FaultRules/>
                    <Name>Claims-For-Generate-Id-Token</Name>
                </Step>
                <Step>
                    <Condition>ResponseTypeIdToken = true</Condition>
                    <FaultRules/>
                    <Name>Generate-Id-Token</Name>
                </Step>
                <Step>
                    <Condition>ResponseTypeIdToken = true</Condition>
                    <FaultRules/>
                    <Name>Service-Callout-Create-ID-token</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Construct-Redirect-Application-URI</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Assign-Consent-Application-TX-Response</Name>
                </Step>
            </Response>
            <Condition>(proxy.pathsuffix MatchesPath "/authorized") and (request.verb = "POST")</Condition>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request/>
        <Response>
            <Step>
                <FaultRules/>
                <Name>Add-CORS</Name>
            </Step>
        </Response>
    </PostFlow>
    <PreFlow name="PreFlow">
        <Request/>
        <Response/>
    </PreFlow>
    <HTTPProxyConnection>
        <BasePath>/apis/v1.0.1/oauth</BasePath>
        <Properties/>
        <VirtualHost>secure</VirtualHost>
        <VirtualHost>default</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
        <Condition>(proxy.pathsuffix MatchesPath "/authorize")</Condition>
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
    <RouteRule name="noroute">
        <Condition>(proxy.pathsuffix MatchesPath "/authorized") or (proxy.pathsuffix MatchesPath "/token")</Condition>
    </RouteRule>
</ProxyEndpoint>